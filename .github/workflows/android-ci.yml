name: Android CI (Fixed Path)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
  CMDLINE_TOOLS_VERSION: 9477386

jobs:
  build:
    name: Build & Test
    runs-on: macos-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 17 (x64)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          architecture: x64  # 强制使用x86架构

      - name: Install Android SDK
        timeout-minutes: 15
        run: |
          # 创建SDK目录
          mkdir -p $ANDROID_SDK_ROOT

          # 下载命令行工具
          cd $ANDROID_SDK_ROOT
          curl -L -o cmdline-tools.zip \
            "https://dl.google.com/android/repository/commandlinetools-mac-${CMDLINE_TOOLS_VERSION}_latest.zip"
          
          # 修正解压路径（关键修复）
          unzip -q cmdline-tools.zip -d tmp
          mkdir -p cmdline-tools/latest
          mv tmp/cmdline-tools/* cmdline-tools/latest/
          rm -rf tmp cmdline-tools.zip

          # 设置环境变量
          echo "PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV

          # 接受许可协议（使用绝对路径）
          yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses > /dev/null

      - name: Verify SDK Installation
        run: |
          echo "Android SDK路径: $ANDROID_SDK_ROOT"
          ls -l $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/
          which sdkmanager
          sdkmanager --version

      - name: Install Platform Tools
        run: |
          sdkmanager "platform-tools" "emulator"

      - name: Build APK
        run: |
          chmod +x gradlew
          ./gradlew assembleDebug

      - name: Emulator Test
        timeout-minutes: 25
        run: |
          # 安装系统镜像
          sdkmanager "system-images;android-30;google_apis;x86_64"
          
          # 创建AVD
          echo "no" | avdmanager create avd \
            --name "ci_avd" \
            --package "system-images;android-30;google_apis;x86_64" \
            --abi "x86_64"
          
          # 启动模拟器
          $ANDROID_SDK_ROOT/emulator/emulator \
            -avd ci_avd \
            -port 5586 \
            -no-audio \
            -no-snapshot \
            -gpu swiftshader_indirect &
          
          # 等待设备就绪
          adb wait-for-device
          for i in {1..30}; do
            if adb shell getprop sys.boot_completed | grep -q 1; then
              break
            fi
            sleep 10
          done
          
          # 执行测试
          adb install app/build/outputs/apk/debug/app-debug.apk
          ./gradlew connectedDebugAndroidTest
