plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
    id "com.github.ben-manes.versions" version "0.51.0"
     id 'jacoco'
}
jacoco {
    toolVersion = "0.8.11"
}

task jacocoTestReport(type: JacocoReport) {
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    sourceDirectories.from = files(["src/main/java"])
    classDirectories.from = files(fileTree(dir: "build/intermediates/javac/debug/classes"))
    executionData.from = files("build/jacoco/testDebugUnitTest.exec")
}

android {
    namespace 'com.danmo.guide'
    compileSdk 35

    defaultConfig {
        applicationId "com.danmo.guide"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        ndk {
            abiFilters 'armeabi','armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
        
        lintOptions {
            htmlReport true
            xmlReport true
            htmlOutput file("$buildDir/reports/lint-results.html")
        }
        
        multiDexEnabled true // 启用 multidex

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            packagingOptions {
                doNotStrip '*/armeabi/*.so'
                doNotStrip '*/armeabi-v7a/*.so'
                doNotStrip '*/arm64-v8a/*.so'
                doNotStrip '*/x86/*.so'
                doNotStrip '*/x86_64/*.so'
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        compose true
        viewBinding true
        mlModelBinding true// 启用 View Binding
    }
    aaptOptions {
        noCompress "tflite"
    }
    packagingOptions {
        pickFirst 'lib/armeabi/libtensorflowlite.so'
        pickFirst 'lib/x86/libtensorflowlite.so'
        pickFirst 'lib/x86_64/libtensorflowlite.so'
        pickFirst 'lib/arm64-v8a/libtensorflowlite.so'
        pickFirst 'lib/armeabi-v7a/libtensorflowlite.so'
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }
}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.material3
    // 基础库
    implementation(libs.androidx.appcompat)

    // Compose
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)

    // CameraX
    implementation(libs.androidx.camera.core)
    implementation(libs.androidx.camera.camera2)
    implementation(libs.androidx.camera.lifecycle)
    implementation(libs.androidx.camera.view)

    // TensorFlow Lite
    implementation(libs.tensorflow.lite) {
        exclude group: 'com.google.ai.edge.litert', module: 'litert'
        exclude group: 'com.google.ai.edge.litert', module: 'litert-api'
    }
    implementation(libs.tensorflow.lite.support) {
        exclude group: 'com.google.ai.edge.litert', module: 'litert'
        exclude group: 'com.google.ai.edge.litert', module: 'litert-api'
    }
    implementation(libs.tensorflow.lite.gpu) {
        exclude group: 'com.google.ai.edge.litert', module: 'litert'
        exclude group: 'com.google.ai.edge.litert', module: 'litert-api'
    }
    implementation(libs.tensorflow.lite.task.vision) {
        exclude group: 'com.google.ai.edge.litert', module: 'litert'
        exclude group: 'com.google.ai.edge.litert', module: 'litert-api'
    }
    implementation(libs.material)
    // 其他
    implementation(libs.oboe)
    implementation libs.media3.exoplayer
    implementation libs.androidx.constraintlayout
    implementation libs.firebase.crashlytics.buildtools
    implementation libs.tensorflow.lite.metadata
    implementation libs.firebase.firestore.ktx
    implementation libs.androidx.preference.ktx
    implementation(libs.androidx.multidex) // 添加 multidex 依赖
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.ui.test.junit4
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest
}
